########################################################################
######################## PROBLEMS FOR 4710 ONLY ########################
########################################################################

public static boolean isEven(int val)
# Purpose: Given an integer, returns whether or not it is an even number.
# Input: int val - the input integer
# Hint: One of the arithmetic operators can be used to solve this with a single statement.


public static boolean isOdd(int val)
# Purpose: Given an integer, returns whether or not it is an odd number.
# Input: int val - the input integer
# Hint: If 'isEven' correctly works, its code can solve this with only a simple addition.


public static int[] getEvens(int extent)
# Purpose: Returns an int array containing all positive even integers up to and including the
input ‘extent’ (if it happens to be even).
# Input: int extent – the input integer 
# Hint: Function 'isEven' can help with this, as can being creative with a for loop's header.


public static int[] getOdds(int extent)
# Purpose: Returns an int array containing all positive odd integers numbers up to and
including the input ‘extent’ (if it happens to be odd).
# Input: int extent – the input integer
# Hint: As with 'isEven'/'isOdd', this can be solved via slightly modifying a correct 'getEvens'


public static String time24to12(String time)
# Purpose: Given time in 24-H format, return corresponding time in 12-H format.
# Input: String time – the input time in 24-H format as specified in above definition
# Hint: Exploit the specificity of the time format[s] to parse input and prep output


public static String time12to24(String time)
# Purpose: Given time in 12-H format, return corresponding time in 24-H format.
# Input: String time – the input time in 12-H format as specified in above definition
# Hint: Exploit the specificity of the time format[s] to parse input and prep output


public static float farToCel(float far)
# Purpose: Given a temperature in Fahrenheit, return its analogous Celsius value; i.e. return
the value of the input temperature converted into Celsius.
# Input: [float] far – a temperature in Fahrenheit


public static float celToFar(float far)
# Purpose: Given a temperature in Celsius, return its analogous Fahrenheit value; i.e. return
the value of the input temperature converted into Fahrenheit.
# Input: [float] far – a temperature in Celsius


public static boolean isFreezing(float temp, char type)
# Purpose: Given an input temperature and type thereof, return whether the temperature is at
or below the freezing point of water (<=32 if Fahrenheit, <=0 if Celsius). If an invalid type
char is entered (see ‘inputs’ below for valid options), report this fact to the console, then
return ‘false’.
# Inputs: [float] temp - a temperature in Celsius xor Fahrenheit
 [char] type - the type of temperature [‘f’ if Fahrenheit, ‘c’ if Celsius]
# Hint: Use of correctly working 'farToCel'/'celToFar' methods can reduce the amount of code needed.

public static boolean isBoiling(float temp, char type) 
# Purpose: Given an input temperature and type thereof, return whether the temperature is at
or above the boiling point of water (>=212 if Fahrenheit, >=100 if Celsius). If an invalid
type char is entered (see below for valid options), return ‘false’.
# Inputs: [float] temp – a temperature in Celsius xor Fahrenheit
 [char] type - the type of temperature [‘f’ if Fahrenheit, ‘c’ if Celsius]
# Hint: as with the even/odd methods, a correctly working 'isFreezing' can be recycled to solve this.


public static int[] coordToCell(float xPos, float yPos, int cellSize)
Purpose: Given ‘x’ and ‘y’ coordinate positions within a 2D Cartesian Plane split into squareshaped cells of diameter ‘cellSize’, return the row and column of the cell that the input would
fit into. Hint: You could consider this method analogous to one which ‘rounds down’ xPos and yPos
to the nearest cellSize, then integer divides by it e.g. coordToCell(123.45, 678.91, 100)-->{6,1}
# Inputs: [float] xPos – ‘x’ coordinate input
 [float] yPos – ‘y’ coordinate input
 [int] cellSize – diameter of cells of grid world
# Output: int[2] whose contents are {row,column} of cell where query point is located


public static float mapToRange(float val, float inMin, float inMax, float outMin, float outMax)
# Purpose: Map ‘val’ which exists in the range ‘inMin to ‘inMax’ into the range ‘outMin’ to
‘outMax’. This method is analogous to Processing’s ‘map(…)’. Example discussed below.
# Inputs: [float] val – value to be mapped to a new range
 [float] inMin – min bound of input value range
 [float] inMax – max bound of input value range
 [float] outMin – min bound of output value range
 [float] outMax – max bound of output value range
# Hint: This can be reduced to a single line of code, but we suggest starting out with
writing expressions on several lines. We also suggest first trying to figure out how to do
this on your own, before looking at the spoiler code we provide at this link <SPOILER>. And
YES, you can refer to it for your solution, but try not to simply do a copy-paste!

Additional Problems via CodingBat that you'll submit solutions to via Repl (else Classroom):

From 'String-1':
  > conCat
  > makeTags

From 'Logic-1':
  > inOrderEqual
  > maxMod5
  > old35
  > alarmClock
  > specialEleven
  > shareDigit

From 'Logic-2':
  > evenlySpaced
  > makeBricks